## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""@model"""
type Bike {
  _id: GraphbackObjectID!
  description: String

  """
  @oneToOne(key: 'ownerId')
  @oneToOne
  """
  owner: User!

  """@manyToOne(field: 'bikes', key: 'theftId')"""
  theft: Theft
}

input BikeFilter {
  _id: GraphbackObjectIDInput
  description: StringInput
  ownerId: GraphbackObjectIDInput
  theftId: GraphbackObjectIDInput
  and: [BikeFilter!]
  or: [BikeFilter!]
  not: BikeFilter
}

type BikeResultList {
  items: [Bike]!
  offset: Int
  limit: Int
  count: Int
}

input BikeSubscriptionFilter {
  and: [BikeSubscriptionFilter!]
  or: [BikeSubscriptionFilter!]
  not: BikeSubscriptionFilter
  _id: GraphbackObjectIDInput
  description: StringInput
}

input CreateBikeInput {
  _id: GraphbackObjectID
  description: String
  ownerId: GraphbackObjectID!
  theftId: GraphbackObjectID
}

input CreateTheftInput {
  _id: GraphbackObjectID
  date: String!
  location: String!
  comments: String
  ownerId: GraphbackObjectID!
}

input CreateUserInput {
  _id: GraphbackObjectID
  name: String!
  contact: String!
}

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

input MutateBikeInput {
  _id: GraphbackObjectID!
  description: String
  ownerId: GraphbackObjectID
  theftId: GraphbackObjectID
}

input MutateTheftInput {
  _id: GraphbackObjectID!
  date: String
  location: String
  comments: String
  ownerId: GraphbackObjectID
}

input MutateUserInput {
  _id: GraphbackObjectID!
  name: String
  contact: String
}

type Mutation {
  createTheft(input: CreateTheftInput!): Theft
  updateTheft(input: MutateTheftInput!): Theft
  deleteTheft(input: MutateTheftInput!): Theft
  createBike(input: CreateBikeInput!): Bike
  updateBike(input: MutateBikeInput!): Bike
  deleteBike(input: MutateBikeInput!): Bike
  createUser(input: CreateUserInput!): User
  updateUser(input: MutateUserInput!): User
  deleteUser(input: MutateUserInput!): User
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getTheft(id: GraphbackObjectID!): Theft
  findThefts(filter: TheftFilter, page: PageRequest, orderBy: OrderByInput): TheftResultList!
  getBike(id: GraphbackObjectID!): Bike
  findBikes(filter: BikeFilter, page: PageRequest, orderBy: OrderByInput): BikeResultList!
  getUser(id: GraphbackObjectID!): User
  findUsers(filter: UserFilter, page: PageRequest, orderBy: OrderByInput): UserResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newTheft(filter: TheftSubscriptionFilter): Theft!
  updatedTheft(filter: TheftSubscriptionFilter): Theft!
  deletedTheft(filter: TheftSubscriptionFilter): Theft!
  newBike(filter: BikeSubscriptionFilter): Bike!
  updatedBike(filter: BikeSubscriptionFilter): Bike!
  deletedBike(filter: BikeSubscriptionFilter): Bike!
  newUser(filter: UserSubscriptionFilter): User!
  updatedUser(filter: UserSubscriptionFilter): User!
  deletedUser(filter: UserSubscriptionFilter): User!
}

"""@model"""
type Theft {
  _id: GraphbackObjectID!
  date: String!
  location: String!

  """
  @oneToMany(field: 'theft', key: 'theftId')
  @oneToMany(field: 'theft')
  """
  bikes(filter: BikeFilter): [Bike!]
  comments: String

  """
  @oneToOne(key: 'ownerId')
  @oneToOne
  """
  owner: User!
}

input TheftFilter {
  _id: GraphbackObjectIDInput
  date: StringInput
  location: StringInput
  comments: StringInput
  ownerId: GraphbackObjectIDInput
  and: [TheftFilter!]
  or: [TheftFilter!]
  not: TheftFilter
}

type TheftResultList {
  items: [Theft]!
  offset: Int
  limit: Int
  count: Int
}

input TheftSubscriptionFilter {
  and: [TheftSubscriptionFilter!]
  or: [TheftSubscriptionFilter!]
  not: TheftSubscriptionFilter
  _id: GraphbackObjectIDInput
  date: StringInput
  location: StringInput
  comments: StringInput
}

"""@model"""
type User {
  _id: GraphbackObjectID!
  name: String!
  contact: String!
}

input UserFilter {
  _id: GraphbackObjectIDInput
  name: StringInput
  contact: StringInput
  and: [UserFilter!]
  or: [UserFilter!]
  not: UserFilter
}

type UserResultList {
  items: [User]!
  offset: Int
  limit: Int
  count: Int
}

input UserSubscriptionFilter {
  and: [UserSubscriptionFilter!]
  or: [UserSubscriptionFilter!]
  not: UserSubscriptionFilter
  _id: GraphbackObjectIDInput
  name: StringInput
  contact: StringInput
}